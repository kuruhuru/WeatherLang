package WeatherPrediction.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_CelsiusTemperature;
  private ConceptPresentation props_PredictionList;
  private ConceptPresentation props_PredictionResult;
  private ConceptPresentation props_Temperature;
  private ConceptPresentation props_Time;
  private ConceptPresentation props_WeatherData;
  private ConceptPresentation props_WeatherTimedData;
  private ConceptPresentation props_fahrenheit;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.CelsiusTemperature:
        if (props_CelsiusTemperature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("c");
          props_CelsiusTemperature = cpb.create();
        }
        return props_CelsiusTemperature;
      case LanguageConceptSwitch.PredictionList:
        if (props_PredictionList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PredictionList = cpb.create();
        }
        return props_PredictionList;
      case LanguageConceptSwitch.PredictionResult:
        if (props_PredictionResult == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0x6fcf2f9c439dc0a9L, 0x6fcf2f9c439dc0aaL, "input", "", "");
          props_PredictionResult = cpb.create();
        }
        return props_PredictionResult;
      case LanguageConceptSwitch.Temperature:
        if (props_Temperature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Temperature = cpb.create();
        }
        return props_Temperature;
      case LanguageConceptSwitch.Time:
        if (props_Time == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Time");
          props_Time = cpb.create();
        }
        return props_Time;
      case LanguageConceptSwitch.WeatherData:
        if (props_WeatherData == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_WeatherData = cpb.create();
        }
        return props_WeatherData;
      case LanguageConceptSwitch.WeatherTimedData:
        if (props_WeatherTimedData == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("WeatherTimedData");
          props_WeatherTimedData = cpb.create();
        }
        return props_WeatherTimedData;
      case LanguageConceptSwitch.fahrenheit:
        if (props_fahrenheit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("f");
          props_fahrenheit = cpb.create();
        }
        return props_fahrenheit;
    }
    return null;
  }
}
