package WeatherPrediction.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptCelsiusTemperature = createDescriptorForCelsiusTemperature();
  /*package*/ final ConceptDescriptor myConceptPredictionList = createDescriptorForPredictionList();
  /*package*/ final ConceptDescriptor myConceptPredictionResult = createDescriptorForPredictionResult();
  /*package*/ final ConceptDescriptor myConceptTemperature = createDescriptorForTemperature();
  /*package*/ final ConceptDescriptor myConceptTime = createDescriptorForTime();
  /*package*/ final ConceptDescriptor myConceptWeatherData = createDescriptorForWeatherData();
  /*package*/ final ConceptDescriptor myConceptWeatherTimedData = createDescriptorForWeatherTimedData();
  /*package*/ final ConceptDescriptor myConceptfahrenheit = createDescriptorForfahrenheit();
  private final LanguageConceptSwitch myConceptIndex;

  public StructureAspectDescriptor() {
    myConceptIndex = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCelsiusTemperature, myConceptPredictionList, myConceptPredictionResult, myConceptTemperature, myConceptTime, myConceptWeatherData, myConceptWeatherTimedData, myConceptfahrenheit);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myConceptIndex.index(id)) {
      case LanguageConceptSwitch.CelsiusTemperature:
        return myConceptCelsiusTemperature;
      case LanguageConceptSwitch.PredictionList:
        return myConceptPredictionList;
      case LanguageConceptSwitch.PredictionResult:
        return myConceptPredictionResult;
      case LanguageConceptSwitch.Temperature:
        return myConceptTemperature;
      case LanguageConceptSwitch.Time:
        return myConceptTime;
      case LanguageConceptSwitch.WeatherData:
        return myConceptWeatherData;
      case LanguageConceptSwitch.WeatherTimedData:
        return myConceptWeatherTimedData;
      case LanguageConceptSwitch.fahrenheit:
        return myConceptfahrenheit;
      default:
        return null;
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myConceptIndex.index(c);
  }

  private static ConceptDescriptor createDescriptorForCelsiusTemperature() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WeatherPrediction", "CelsiusTemperature", 0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0xa2c398ee236772aL);
    b.class_(false, false, false);
    b.parent(0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0xa2c398ee2361f51L);
    b.origin("r:ede374ab-3b41-4f85-b3e5-091dbc2145c7(WeatherPrediction.structure)/733024125197907754");
    b.alias("c");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPredictionList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WeatherPrediction", "PredictionList", 0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0xa2c398ee2360af5L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:ede374ab-3b41-4f85-b3e5-091dbc2145c7(WeatherPrediction.structure)/733024125197880053");
    b.aggregate("weatherData", 0xa2c398ee236c40bL).target(0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0x6fcf2f9c439dc0acL).optional(false).ordered(true).multiple(false).origin("733024125197927435").done();
    b.aggregate("result", 0x6fcf2f9c439f2a64L).target(0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0x6fcf2f9c439dc0a9L).optional(false).ordered(true).multiple(false).origin("8056710606585014884").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPredictionResult() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WeatherPrediction", "PredictionResult", 0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0x6fcf2f9c439dc0a9L);
    b.class_(false, false, false);
    b.origin("r:ede374ab-3b41-4f85-b3e5-091dbc2145c7(WeatherPrediction.structure)/8056710606584922281");
    b.associate("input", 0x6fcf2f9c439dc0aaL).target(0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0x6fcf2f9c439dc0acL).optional(false).origin("8056710606584922282").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTemperature() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WeatherPrediction", "Temperature", 0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0xa2c398ee2361f51L);
    b.interface_();
    b.origin("r:ede374ab-3b41-4f85-b3e5-091dbc2145c7(WeatherPrediction.structure)/733024125197885265");
    b.prop("value", 0xa2c398ee2361f52L, "733024125197885266");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTime() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WeatherPrediction", "Time", 0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0xa2c398ee2361f48L);
    b.class_(false, false, false);
    b.origin("r:ede374ab-3b41-4f85-b3e5-091dbc2145c7(WeatherPrediction.structure)/733024125197885256");
    b.prop("hours", 0xa2c398ee2361f49L, "733024125197885257");
    b.prop("minutes", 0xa2c398ee2361f4bL, "733024125197885259");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWeatherData() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WeatherPrediction", "WeatherData", 0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0x6fcf2f9c439dc0acL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:ede374ab-3b41-4f85-b3e5-091dbc2145c7(WeatherPrediction.structure)/8056710606584922284");
    b.aggregate("items", 0x6fcf2f9c439dc0afL).target(0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0xa2c398ee2361f42L).optional(false).ordered(true).multiple(true).origin("8056710606584922287").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWeatherTimedData() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WeatherPrediction", "WeatherTimedData", 0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0xa2c398ee2361f42L);
    b.class_(false, false, false);
    b.origin("r:ede374ab-3b41-4f85-b3e5-091dbc2145c7(WeatherPrediction.structure)/733024125197885250");
    b.aggregate("temperature", 0xa2c398ee2361f43L).target(0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0xa2c398ee2361f51L).optional(false).ordered(true).multiple(false).origin("733024125197885251").done();
    b.aggregate("time", 0xa2c398ee2361f45L).target(0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0xa2c398ee2361f48L).optional(false).ordered(true).multiple(false).origin("733024125197885253").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForfahrenheit() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("WeatherPrediction", "fahrenheit", 0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0xa2c398ee2372dffL);
    b.class_(false, false, false);
    b.parent(0x3c2871aecbd349c9L, 0xbb563e9f18911c6bL, 0xa2c398ee2361f51L);
    b.origin("r:ede374ab-3b41-4f85-b3e5-091dbc2145c7(WeatherPrediction.structure)/733024125197954559");
    b.alias("f");
    return b.create();
  }
}
